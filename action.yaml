name: PR Slack Notifier
description: Notify Slack channels when PRs are opened/updated
inputs:
  config_json:
    description: "JSON string containing {channels, usergroups, users} (recommend passing from a secret)"
    required: true
  slack_token:
    description: "Slack Bot User OAuth Token (xoxb-...)"
    required: true

runs:
  using: "composite"
  steps:
    ################################################
    # Helper library used by all subsequent steps  #
    ################################################
    - name: Prepare helpers
      id: helpers
      shell: bash
      run: |
        set -euo pipefail
        cat > /tmp/slack_helpers.sh <<'BASH'
        set -euo pipefail

        slack_token="${SLACK_TOKEN:?SLACK_TOKEN required}"
        config_json="${CONFIG_JSON:?CONFIG_JSON required}"
        : "${PR_NUMBER:?PR_NUMBER required}"

        # ---- Sanitization helpers ----
        # Escape for Slack link labels: &, <, >
        sanitize_label() {
          LC_ALL=C tr '\r\n' ' ' \
          | sed -e 's/&/\&amp;/g' \
                -e 's/</\&lt;/g' \
                -e 's/>/\&gt;/g'
        }

        # ---- Config lookups ----
        channel_for_team() {
          local team="$1"
          printf '%s' "$config_json" | jq -r --arg t "$team" '.channels[$t] // empty'
        }
        mention_for_team() {
          local team="$1"
          local ug
          ug=$(printf '%s' "$config_json" | jq -r --arg t "$team" '.usergroups[$t] // empty')
          if [ -n "$ug" ]; then
            printf '<!subteam^%s|@%s>' "$ug" "$team"
          else
            printf '@%s' "$team"
          fi
        }
        mention_for_author() {
          local gh_login="$1"
          local sid
          sid=$(printf '%s' "$config_json" | jq -r --arg g "$gh_login" '.users[$g] // empty')
          if [ -n "$sid" ]; then
            printf '<@%s>' "$sid"
          else
            printf '@%s' "$gh_login"
          fi
        }

        # ---- Slack API wrappers (jq does the JSON escaping) ----
        slack_post() {
          local channel="$1" text="$2"
          curl -sS -X POST \
            -H "Authorization: Bearer $slack_token" \
            -H "Content-type: application/json" \
            --data "$(jq -nc --arg ch "$channel" --arg tx "$text" '{channel:$ch,text:$tx}')" \
            https://slack.com/api/chat.postMessage
        }
        slack_update() {
          local channel="$1" ts="$2" text="$3"
          curl -sS -X POST \
            -H "Authorization: Bearer $slack_token" \
            -H "Content-type: application/json" \
            --data "$(jq -nc --arg ch "$channel" --arg ts "$ts" --arg tx "$text" '{channel:$ch,ts:$ts,text:$tx}')" \
            https://slack.com/api/chat.update
        }

        # ---- PR label helpers (require GH_TOKEN) ----
        read_existing_ts_labels() {
          gh api /repos/${GITHUB_REPOSITORY}/issues/${PR_NUMBER}/labels \
          | jq -r '.[]?.name | select(startswith("slack-ts:"))' \
          | awk -F: '{ team=$2; ts=$3; if (team!="" && ts!="") print team, ts }'
        }
        ts_for_team() {
          local team="$1"
          local line
          while read -r t ts; do
            if [ "$t" = "$team" ]; then
              printf '%s' "$ts"; return
            fi
          done < <(read_existing_ts_labels)
        }
        store_ts_label() {
          local team="$1" ts="$2"
          gh api -X POST -H "Accept: application/vnd.github+json" \
            /repos/${GITHUB_REPOSITORY}/issues/${PR_NUMBER}/labels \
            -f labels[]="slack-ts:${team}:${ts}" >/dev/null
        }
        BASH
        echo "ok=1" >> "$GITHUB_OUTPUT"

    ############################################################
    # REVIEW REQUESTED: post/update for the team from event    #
    ############################################################
    - name: Handle review_requested (post/update per team)
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'review_requested' }}
      env:
        SLACK_TOKEN: ${{ inputs.slack_token }}
        CONFIG_JSON: ${{ inputs.config_json }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        PR_TITLE: ${{ github.event.pull_request.title }}
        GH_TOKEN: ${{ github.token }}
      shell: bash
      run: |
        set -euo pipefail
        source /tmp/slack_helpers.sh

        team="${{ github.event.requested_team.slug }}"
        channel="$(channel_for_team "$team")"
        if [ -z "$channel" ]; then
          echo "No channel configured for team '$team'; skipping."
          exit 0
        fi

        team_mention="$(mention_for_team "$team")"
        author_mention="$(mention_for_author "${{ github.event.pull_request.user.login }}")"
        repo_name="${GITHUB_REPOSITORY#*/}"
        pr_url="${{ github.event.pull_request.html_url }}"

        # Build safe label from raw title (no pre-escaping)
        label_text=$(printf '%s: %s' "$repo_name" "$PR_TITLE" | sanitize_label)

        text=":gh-opened: <${pr_url}|${label_text}> is waiting for review from ${team_mention} — ${author_mention}"

        existing_ts="$(ts_for_team "$team" || true)"
        if [ -n "$existing_ts" ]; then
          resp="$(slack_update "$channel" "$existing_ts" "$text")"
          ok=$(printf '%s' "$resp" | jq -r '.ok')
          [ "$ok" = "true" ] || { echo "Slack update failed: $resp" >&2; exit 1; }
        else
          resp="$(slack_post "$channel" "$text")"
          ok=$(printf '%s' "$resp" | jq -r '.ok'); ts=$(printf '%s' "$resp" | jq -r '.ts')
          [ "$ok" = "true" ] && [ -n "$ts" ] && [ "$ts" != "null" ] || { echo "Slack post failed: $resp" >&2; exit 1; }
          store_ts_label "$team" "$ts"
        fi

    #####################################################################
    # REOPENED: post/update for ALL requested teams that have channels  #
    #####################################################################
    - name: Handle reopened (post/update for all requested teams)
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'reopened' }}
      env:
        SLACK_TOKEN: ${{ inputs.slack_token }}
        CONFIG_JSON: ${{ inputs.config_json }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        PR_TITLE: ${{ github.event.pull_request.title }}
        GH_TOKEN: ${{ github.token }}
      shell: bash
      run: |
        set -euo pipefail
        source /tmp/slack_helpers.sh

        mapfile -t teams < <(jq -r '.pull_request.requested_teams[]?.slug' "$GITHUB_EVENT_PATH")
        if [ "${#teams[@]}" -eq 0 ]; then
          echo "No requested teams on reopen; nothing to do."
          exit 0
        fi

        repo_name="${GITHUB_REPOSITORY#*/}"
        pr_url="${{ github.event.pull_request.html_url }}"
        author_mention="$(mention_for_author "${{ github.event.pull_request.user.login }}")"
        label_text=$(printf '%s: %s' "$repo_name" "$PR_TITLE" | sanitize_label)

        for team in "${teams[@]}"; do
          channel="$(channel_for_team "$team")"
          if [ -z "$channel" ]; then
            echo "Skipping team '$team' (no channel configured)."
            continue
          fi
          team_mention="$(mention_for_team "$team")"
          text=":gh-opened: <${pr_url}|${label_text}> is waiting for review from ${team_mention} — ${author_mention}"

          existing_ts="$(ts_for_team "$team" || true)"
          if [ -n "$existing_ts" ]; then
            resp="$(slack_update "$channel" "$existing_ts" "$text")"
            ok=$(printf '%s' "$resp" | jq -r '.ok')
            [ "$ok" = "true" ] || { echo "Slack update failed ($team): $resp" >&2; exit 1; }
          else
            resp="$(slack_post "$channel" "$text")"
            ok=$(printf '%s' "$resp" | jq -r '.ok'); ts=$(printf '%s' "$resp" | jq -r '.ts')
            [ "$ok" = "true" ] && [ -n "$ts" ] && [ "$ts" != "null" ] || { echo "Slack post failed ($team): $resp" >&2; exit 1; }
            store_ts_label "$team" "$ts"
          fi
        done

    #########################################################################
    # REVIEW SUBMITTED: update ALL team messages (approved/changes/comment) #
    #########################################################################
    - name: Update Slack on review submit
      if: ${{ github.event_name == 'pull_request_review' && github.event.action == 'submitted' }}
      env:
        SLACK_TOKEN: ${{ inputs.slack_token }}
        CONFIG_JSON: ${{ inputs.config_json }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        PR_TITLE: ${{ github.event.pull_request.title }}
        GH_TOKEN: ${{ github.token }}
      shell: bash
      run: |
        set -euo pipefail
        source /tmp/slack_helpers.sh

        state="${{ github.event.review.state }}"
        repo_name="${GITHUB_REPOSITORY#*/}"
        pr_url="${{ github.event.pull_request.html_url }}"
        author_mention="$(mention_for_author "${{ github.event.pull_request.user.login }}")"
        label_text=$(printf '%s: %s' "$repo_name" "$PR_TITLE" | sanitize_label)

        case "$state" in
          approved|APPROVED)                          emoji=":gh-approved:";          msg="is ready to merge" ;;
          changes_requested|CHANGES_REQUESTED)        emoji=":gh-requested-changes:"; msg="has requested changes" ;;
          commented|COMMENTED|dismissed|DISMISSED|pending|PENDING)
                                                       emoji=":gh-reviewed:";          msg="was reviewed" ;;
          *)                                           emoji=":gh-reviewed:";          msg="was reviewed" ;;
        esac

        while read -r team ts; do
          channel="$(channel_for_team "$team")"
          if [ -z "$channel" ]; then
            echo "No channel for team '$team' (label exists) – skipping."
            continue
          fi
          text="${emoji} <${pr_url}|${label_text}> ${msg} — ${author_mention}"
          resp="$(slack_update "$channel" "$ts" "$text")"
          ok=$(printf '%s' "$resp" | jq -r '.ok')
          [ "$ok" = "true" ] || { echo "Slack update failed ($team): $resp" >&2; exit 1; }
        done < <(read_existing_ts_labels)

    ###########################################################
    # CLOSED / MERGED: update ALL team messages accordingly   #
    ###########################################################
    - name: Update Slack on close/merge
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
      env:
        SLACK_TOKEN: ${{ inputs.slack_token }}
        CONFIG_JSON: ${{ inputs.config_json }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        PR_TITLE: ${{ github.event.pull_request.title }}
        GH_TOKEN: ${{ github.token }}
      shell: bash
      run: |
        set -euo pipefail
        source /tmp/slack_helpers.sh

        merged="${{ github.event.pull_request.merged }}"
        repo_name="${GITHUB_REPOSITORY#*/}"
        pr_url="${{ github.event.pull_request.html_url }}"
        label_text=$(printf '%s: %s' "$repo_name" "$PR_TITLE" | sanitize_label)

        if [ "$merged" = "true" ]; then
          emoji=":gh-merged:"; msg="was merged"
        else
          emoji=":gh-closed:"; msg="was closed"
        fi

        while read -r team ts; do
          channel="$(channel_for_team "$team")"
          if [ -z "$channel" ]; then
            echo "No channel for team '$team' (label exists) – skipping."
            continue
          fi
          text="${emoji} <${pr_url}|${label_text}> ${msg}"
          resp="$(slack_update "$channel" "$ts" "$text")"
          ok=$(printf '%s' "$resp" | jq -r '.ok')
          [ "$ok" = "true" ] || { echo "Slack update failed ($team): $resp" >&2; exit 1; }
        done < <(read_existing_ts_labels)
